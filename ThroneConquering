package Advanced.Exams;

import java.util.Scanner;

public class ThroneConquering2 {

    private static int row = 0;
    private static int col = 0;
    private static int energyP = 0;
    private static boolean isAbducted = false;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        energyP = Integer.parseInt(scanner.nextLine());
        int size = Integer.parseInt(scanner.nextLine());
        char [][] troy = new char[size][];
        for (int i = 0; i < size; i++) {
            troy [i] = scanner.nextLine().toCharArray();
        }
        for (int r = 0; r < troy.length; r++) {
            for (int c = 0; c < troy[r].length; c++) {
                if (troy[r][c] == 'P') {
                    row = r;
                    col = c;
                }
            }
        }
        while (energyP > 0) {
            energyP --;
            String [] commands = scanner.nextLine().split("\\s+");
            troy[Integer.parseInt(commands[1])][Integer.parseInt(commands[2])] = 'S';
            if (commands[0].equals("up")) {
                movement(troy, -1, 0);
            } else if (commands[0].equals("down")) {
                movement(troy, 1, 0);
            } else if (commands[0].equals("left")) {
                movement(troy, 0, -1);
            } else if (commands[0].equals("right")) {
                movement(troy, 0, 1);
            }

            if (isAbducted) {
                System.out.println("Paris has successfully abducted Helen! Energy left: " + energyP);
                break;
            }
        }
        if (energyP <= 0) {
            System.out.printf("Paris died at %d;%d.%n", row, col);
        }

        for (int i = 0; i < troy.length; i++) {
            for (int j = 0; j < troy[i].length; j++) {
                System.out.print(troy[i][j]);
            }
            System.out.println();
        }



    }
    private static void movement (char [][] troy, int rowMove, int colMove) {
        int nextRow = row + rowMove;
        int nextCol = col + colMove;

        if (!isValid(troy, nextRow, nextCol)) {
            return;
        }
        if (troy[nextRow][nextCol] == 'S') {
            energyP -= 2;
        }
        if (energyP <= 0) {
            troy[nextRow][nextCol] = 'X';
            troy[row][col] = '-';
            row = nextRow;
            col = nextCol;
            return;
        }
        if (troy[nextRow][nextCol] == 'H') {
            troy[row][col] = '-';
            troy[nextRow][nextCol] = '-';
            isAbducted = true;
            return;
        }
        troy[nextRow][nextCol] = 'P';
        troy[row][col] = '-';
        row = nextRow;
        col = nextCol;


    }
    private static boolean isValid (char [][] troy, int row, int col) {
        return row >= 0 && row < troy.length && col >= 0 && col < troy[row].length;
    }
}
